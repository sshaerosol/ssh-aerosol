# Copyright (C) 2024, CEREA (ENPC) - INERIS
#
# SSH-aerosol is distributed under the GNU General Public License v3
#

import os

# # Put the path to SSH-aerosol.
# # Also editable from command line with option "polyphemus".
src_path = "./"

utils = SConscript(src_path + '/scons/utils')(globals())

# Include paths: put the absolute paths, the relative paths in 
# SSH-aerosol directory.
include_path = """
    include/Talos
    include/SeldonData
    include/AtmoData
    include/isorropia_aec
    include/CHEMISTRY
    include/INC
    include/RDB
    include/SOAP
    include/Module
    """
        
# [Optional] Compiled library paths: put absolute paths, relative paths or
# paths that are in the Polyphemus directory. Put the list of paths to
# compiled libraries that may not be installed in your system root.
library_path = None

exclude_dependency = [ ]

# # Default chemistry: cb05
# if 'chemistry' not in ARGUMENTS:
#     ARGUMENTS["chemistry"] = 'cb05'

# Default: no shared library
if 'sharedlib' not in ARGUMENTS:
    ARGUMENTS["sharedlib"] = 'no'

# chemistry_list = utils.create_list("chemistry", 
#                                    ["racm", "racm2", "cb05", "cb05en",
#                                     "cb05v0", ARGUMENTS["chemistry"]], "*")
sharedlib_list = utils.create_list("sharedlib", ["yes", "no"], "*")

# src_dependencies is nececessary in scons/scons_ext/utils.py
# to compile soap.cpp
src_dependencies = os.path.join(src_path,
   "include/SOAP/soap.cpp") 

# Path to netcdf.mod
netcdf_path = "/usr/include" 
flag_fortran = "-I" + netcdf_path + " -cpp"

# Compiler choice
# - Default compilers suite: gcc
# - Intel compiler: scons intel=yes in compile
#cpp_compiler = "test"
# linker = "g++"

# for chemistry in chemistry_list:
#     include_path = include_path_template.format(chemistry=chemistry)
# Hack in Polair3DChemistry.

preprocessor_defines = ["POLYPHEMUS_WITH_AEROSOL_MODULE"]
build_flavor = []
program_suffix = []

for sharedlib in sharedlib_list:
    if sharedlib == "no":
        utils.create_programs()
    elif sharedlib == "yes":
        utils.create_programs(False)

# Avoids displaying the libraries checking next time since libraries
# does not change in this case.
utils.run.quiet(True)
