             Fast-J Cross-section Generation Routines
            ------------------------------------------

-------------------------------------------------------------------------

	This version of the code is a mix between the avcs-version of O. Wild
(98) and the more recent version by Prather (2004 ?). Of the old version (avcs)
only the wn10 (.f, .in etc..) routines have been used here because there is no such 
routines in the new version. This wn10.f routine has been slightly modified 
to read cross-sections in the CMAQ/JPROC input format.

										Real 2008    
--------------------------------------------------------------------------

    This code is intended to generate cross-section data suitable for
  the Fast-J photolysis scheme from supplied raw cross-section data.
  Generation of the data is broken down into 3 sections:

  (1) Generation of a standardized table of cross-sections at 10-wavenumber
     intervals from supplied data, with data at one or more temperatures.

  (2)  run 'add_xsect.f' on output of (1) to generate flux-weighted
         X-sections in the 77-bins used in UCI std chemistry
 
  (3) run 'add_FJX.f' on output of (2) to generate fast-JX tables.

 
  The second and thirth routine can be run on any standardized cross-section
  table and has been written to be entirely general; the first routine
  will require some user intervention to take account of formats and
  to deal with scientific issues such as cross-section tail positions.
  For more detailed info, see below.

STAGE 1:  Generating standardized table

    The pre-processing routine 'wn10.f' puts cross-sections into the
  standard format, and WILL need some alteration. It currently reads in
  the supplied cross-sections at up to two temperatures; the input and
  output file names, number of columns, label and temperatures are
  picked up from the 'wn10.in' file.

  NOTE: Fast-J currently assumes that temperature dependencies can
  be treated linearly, and therefore expects cross-sections at two
  temperatures; if they are different, it interpolates linearly
  between the two, and takes upper or lower values if the temperature
  is outside the supplied range. As temperature dependencies on
  cross-sections are usually small, this isn't a bad approximation.
  Complex temperature dependencies are not currently supported.

  NOTE 2: It is important to define the tails in the input values
  of the cross-sections; first and last cross-section values should
  be zero. The position of these tails is sometimes critical, and
  may have a very significant effect on calculated J-values.

                        Oliver Wild  (4 Sept 98)

STAGE 2 and 3: 

  (2) add_xsections.f
	    reads in data sets: sflx_10cm.dat & wbins_77.dat
   		reads in user-supplied Xsections at 10/cm resolution
        writes (stdout) the 77-bin X-sections
       
  (3) add_FJX.f
   		reads in data set:  FJX_bins.dat
   		uses include file:  cmn_bins.f
   		reads in (stdin) the output from add_xsect
        writes (stdout) the pair of 18-bin fast-JX tables
        

                         Prather (2004 ?)

-----------------------

ACTUAL CONFIGURATION:
input/output directories are read in parameter file (wn10.in,list_spec*)

data/          >>    wn10.f	   	>>  Xsect_10wnumb/
           		       /\
	         		   ||
					 wn10.in

Xsect_10wnumb/ >>  add_xsect.f 	>> Xsect_77wl/
                       /\
	  		           ||
			  list_spec_10wnto77.d


Xsect_77wl/    >>   add_FJX.f	>> Xsect_18wl/
               		   /\
	  		           ||
			  list_spec_77to18.d


-----------------------
								Real 2008
